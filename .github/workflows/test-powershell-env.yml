name: Test PowerShell Development Environment

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - '.devcontainer/**'
      - '.github/workflows/**'
      - 'bin/**'
      - 'scripts/**'
      - 'tests/**'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - '.devcontainer/**'
      - '.github/workflows/**'
      - 'bin/**'
      - 'scripts/**'
      - 'tests/**'
  workflow_dispatch:

jobs:
  test-devcontainer:
    name: Test DevContainer Setup
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build and test devcontainer
      uses: devcontainers/ci@v0.3
      with:
        imageName: powershell-dev-test
        runCmd: |
          # Verify PowerShell installation
          pwsh --version

          # Test PowerShell functionality
          pwsh -c 'Write-Host "PowerShell is working!" -ForegroundColor Green'

          # Verify required modules are installed
          pwsh -c 'Get-InstalledModule | Where-Object {$_.Name -in @("Pester", "PSScriptAnalyzer", "platyPS")} | Format-Table Name, Version'

          # Test sample script creation and execution
          if [ -f "/workspace/scripts/sample.ps1" ]; then
            echo "Sample script exists, testing execution..."
            pwsh /workspace/scripts/sample.ps1 -Name "CI Test"
          else
            echo "Sample script not found, this may be expected"
          fi

          # Test Pester installation
          pwsh -c 'Import-Module Pester -Force; Get-Module Pester'

          # Test PSScriptAnalyzer installation
          pwsh -c 'Import-Module PSScriptAnalyzer -Force; Get-Module PSScriptAnalyzer'

  test-powershell-scripts:
    name: Test PowerShell Scripts
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install PowerShell
      shell: bash
      run: |
        # Update package lists
        sudo apt-get update

        # Install dependencies
        sudo apt-get install -y wget apt-transport-https software-properties-common

        # Download Microsoft signing key and repository
        wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
        sudo dpkg -i packages-microsoft-prod.deb

        # Update package lists with Microsoft repository
        sudo apt-get update

        # Install PowerShell
        sudo apt-get install -y powershell

        # Verify installation
        pwsh --version

    - name: Install PowerShell modules
      shell: pwsh
      run: |
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name Pester -Force -Scope CurrentUser
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        Get-InstalledModule | Format-Table Name, Version

    - name: Test PowerShell scripts syntax
      shell: pwsh
      run: |
        Write-Host "Testing PowerShell script syntax..." -ForegroundColor Blue

        $scriptFiles = Get-ChildItem -Path "." -Filter "*.ps1" -Recurse
        $errors = @()

        foreach ($script in $scriptFiles) {
          Write-Host "Checking syntax of: $($script.FullName)" -ForegroundColor Gray

          try {
            $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $script.FullName -Raw), [ref]$null)
            Write-Host "✅ $($script.Name) - Syntax OK" -ForegroundColor Green
          }
          catch {
            Write-Host "❌ $($script.Name) - Syntax Error: $($_.Exception.Message)" -ForegroundColor Red
            $errors += $script.FullName
          }
        }

        if ($errors.Count -gt 0) {
          Write-Host "Syntax errors found in the following files:" -ForegroundColor Red
          $errors | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
          exit 1
        } else {
          Write-Host "All PowerShell scripts have valid syntax!" -ForegroundColor Green
        }

    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        Write-Host "Running PSScriptAnalyzer..." -ForegroundColor Blue

        $scriptFiles = Get-ChildItem -Path "." -Filter "*.ps1" -Recurse
        $totalIssues = 0

        foreach ($script in $scriptFiles) {
          Write-Host "Analyzing: $($script.FullName)" -ForegroundColor Gray

          $issues = Invoke-ScriptAnalyzer -Path $script.FullName -Severity @('Error', 'Warning')

          if ($issues) {
            Write-Host "Issues found in $($script.Name):" -ForegroundColor Yellow
            $issues | ForEach-Object {
              $severity = if ($_.Severity -eq 'Error') { 'Red' } else { 'Yellow' }
              Write-Host "  [$($_.Severity)] $($_.RuleName): $($_.Message)" -ForegroundColor $severity
              Write-Host "    Line $($_.Line): $($_.ScriptName)" -ForegroundColor Gray
            }
            $totalIssues += $issues.Count
          } else {
            Write-Host "✅ $($script.Name) - No issues found" -ForegroundColor Green
          }
        }

        Write-Host "PSScriptAnalyzer scan complete. Total issues: $totalIssues" -ForegroundColor Blue

        # Don't fail the build for warnings, only for errors
        $errors = Get-ChildItem -Path "." -Filter "*.ps1" -Recurse | ForEach-Object {
          Invoke-ScriptAnalyzer -Path $_.FullName -Severity Error
        }

        if ($errors) {
          Write-Host "❌ PSScriptAnalyzer found errors that must be fixed!" -ForegroundColor Red
          exit 1
        }

    - name: Test existing PowerShell scripts
      shell: pwsh
      run: |
        Write-Host "Testing execution of existing PowerShell scripts..." -ForegroundColor Blue

        # Test the bin directory scripts
        if (Test-Path "bin") {
          $binScripts = Get-ChildItem -Path "bin" -Filter "*.ps1"

          foreach ($script in $binScripts) {
            Write-Host "Testing script: $($script.Name)" -ForegroundColor Gray

            try {
              # Try to validate the script without executing it fully
              # This is a basic test to ensure the script can be loaded
              $scriptContent = Get-Content $script.FullName -Raw
              $scriptBlock = [ScriptBlock]::Create($scriptContent)

              if ($scriptBlock) {
                Write-Host "✅ $($script.Name) - Can be loaded as script block" -ForegroundColor Green
              }
            }
            catch {
              Write-Host "❌ $($script.Name) - Error: $($_.Exception.Message)" -ForegroundColor Red
            }
          }
        }

  test-pester-framework:
    name: Test Pester Framework
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup PowerShell and Pester
      shell: bash
      run: |
        # Install PowerShell
        sudo apt-get update
        wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell

        # Install Pester
        pwsh -c "Set-PSRepository -Name PSGallery -InstallationPolicy Trusted; Install-Module -Name Pester -Force -Scope CurrentUser"

    - name: Create and run sample tests
      shell: pwsh
      run: |
        Write-Host "Creating sample Pester tests..." -ForegroundColor Blue

        # Create tests directory if it doesn't exist
        if (-not (Test-Path "tests")) {
          New-Item -ItemType Directory -Path "tests" -Force
        }

        # Create a basic test file
        $testContent = @'
Describe "PowerShell Environment Tests" {
    Context "Basic PowerShell Functionality" {
        It "Should have PowerShell available" {
            $PSVersionTable.PSVersion | Should -Not -BeNullOrEmpty
        }

        It "Should be able to create variables" {
            $testVar = "Hello, World!"
            $testVar | Should -Be "Hello, World!"
        }

        It "Should be able to use cmdlets" {
            Get-Date | Should -Not -BeNullOrEmpty
        }

        It "Should be running PowerShell 7.x" {
            $PSVersionTable.PSVersion.Major | Should -BeGreaterThan 6
        }
    }

    Context "Module Availability" {
        It "Should have access to core modules" {
            Get-Module -ListAvailable Microsoft.PowerShell.* | Should -Not -BeNullOrEmpty
        }
    }
}
'@

        Set-Content -Path "tests/Environment.Tests.ps1" -Value $testContent

        Write-Host "Running Pester tests..." -ForegroundColor Blue

        # Run the tests
        $testResults = Invoke-Pester -Path "tests" -PassThru

        Write-Host "Test Results:" -ForegroundColor Blue
        Write-Host "  Total: $($testResults.TotalCount)" -ForegroundColor Gray
        Write-Host "  Passed: $($testResults.PassedCount)" -ForegroundColor Green
        Write-Host "  Failed: $($testResults.FailedCount)" -ForegroundColor Red
        Write-Host "  Skipped: $($testResults.SkippedCount)" -ForegroundColor Yellow

        if ($testResults.FailedCount -gt 0) {
          Write-Host "❌ Some tests failed!" -ForegroundColor Red
          exit 1
        } else {
          Write-Host "✅ All tests passed!" -ForegroundColor Green
        }

  test-cross-platform:
    name: Test Cross-Platform Compatibility
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        powershell-version: ['7.2', '7.3', '7.4']
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install PowerShell ${{ matrix.powershell-version }}
      uses: actions/setup-powershell@v1
      with:
        powershell-version: ${{ matrix.powershell-version }}

    - name: Verify PowerShell installation
      shell: pwsh
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Green
        Write-Host "Platform: $($PSVersionTable.Platform)" -ForegroundColor Green
        Write-Host "OS: $($PSVersionTable.OS)" -ForegroundColor Green

    - name: Test basic PowerShell functionality
      shell: pwsh
      run: |
        # Test basic cmdlets
        Get-Date | Write-Host
        Get-Location | Write-Host

        # Test variable assignment
        $testVar = "Cross-platform test successful!"
        Write-Host $testVar -ForegroundColor Green

        # Test file operations
        "Test content" | Out-File -FilePath "test.txt"
        $content = Get-Content "test.txt"
        if ($content -eq "Test content") {
          Write-Host "✅ File operations working" -ForegroundColor Green
        } else {
          Write-Host "❌ File operations failed" -ForegroundColor Red
          exit 1
        }

        # Clean up
        Remove-Item "test.txt" -Force

    - name: Test PowerShell scripts from repository
      shell: pwsh
      run: |
        Write-Host "Testing repository scripts on ${{ matrix.os }} with PowerShell ${{ matrix.powershell-version }}" -ForegroundColor Blue

        # Test syntax of all PowerShell scripts
        $scriptFiles = Get-ChildItem -Path "." -Filter "*.ps1" -Recurse

        foreach ($script in $scriptFiles) {
          try {
            $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $script.FullName -Raw), [ref]$null)
            Write-Host "✅ $($script.Name) - Syntax OK on ${{ matrix.os }}" -ForegroundColor Green
          }
          catch {
            Write-Host "❌ $($script.Name) - Syntax Error on ${{ matrix.os }}: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }
        }
